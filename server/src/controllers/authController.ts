// src/controllers/authController.ts
import { Request, Response } from 'express';
import bcrypt from 'bcrypt';
import jwt from 'jsonwebtoken';
import { UserModel } from '../models/userModel';
import { IUser } from '../interfaces/IUser';
import { validationResult } from 'express-validator';

export const AuthController = {
  async createUser(req: Request, res: Response): Promise<void> {
    const { pseudo, email, password } = req.body;

    const errors = validationResult(req);

    // Validation : 
    if(!errors.isEmpty())
    {
      res.status(400).json({errors : errors.array()});
      return;
    }

    if (!pseudo || !email || !password) {
      res.status(400).json({ error: 'Please provide a pseudo, an email, and a password.' });
      return;
    }

    try {
      // Check if the user already exists in the database by pseudo
      const existingUserByPseudo = await UserModel.findUserByPseudo(pseudo);
      if (existingUserByPseudo) {
        res.status(409).json({ field  : 'pseudo', error: 'The pseudo is already taken.' });
        return;
      }

      // Check if the user already exists in the database by email
      const existingUserByEmail = await UserModel.findUserByEmail(email);
      if (existingUserByEmail) {
        res.status(409).json({ field  : 'email', error: 'The email is already taken.' });
        return;
      }

      // Hash the password before saving it to the database
      const hashedPassword = await bcrypt.hash(password, 10);

      const user: IUser = {
        id: 0, // The ID will be automatically generated by the database
        pseudo,
        email,
        password: hashedPassword,
        created_at: new Date(),
        is_admin: false,
      };

      await UserModel.createUserInDatabase(user);

      res.json({ message: 'User created successfully.' });
    } catch (error) {
      res.status(500).json({ error: 'An error occurred while creating the user.' });
    }
  },

  async login(req: Request, res: Response): Promise<void> {
    const { email, password } = req.body;

    if (!email || !password) {
      res.status(400).json({ error: 'Please provide an email and a password.' });
      return;
    }

    try {
      const user = await UserModel.findUserByEmail(email);

      if (!user) {
        res.status(401).json({ error: 'Incorrect email or password.' });
        return;
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);

      if (!isPasswordValid) {
        res.status(401).json({ error: 'Incorrect email or password.' });
        return;
      }

      const token = jwt.sign(
        { pseudo: user.pseudo, is_admin: user.is_admin },
        process.env.JWT_SECRET_KEY!,
        { expiresIn: `${process.env.JWT_EXPIRE_IN}h` }
      );

      res.cookie('token', token, { httpOnly: true});


      res.status(200).json({ message: 'Logged in successfully' });

    } catch (error) {
      res.status(500).json({ error: 'An error occurred while logging in.' });
    }
  },

  logout(req: Request, res: Response):  void {
    res.clearCookie('token', { httpOnly: true });
    res.status(200).json({ message: 'Logged out successfully' });
  }
};
